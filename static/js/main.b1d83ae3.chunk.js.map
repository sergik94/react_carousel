{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","step","props","frameSize","itemWidth","animationDuration","infinite","prevButtonDisable","nextButtonDisable","position","count","prevButtonClick","setState","nextButtonClick","imgAmount","images","length","componentDidUpdate","prevState","difference","this","alt","className","style","top","type","onClick","disabled","width","transition","borderRadius","transform","map","img","src","id","min","max","defaultValue","onInput","event","currentTarget","value","defaultChecked","checked","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1d83ae3.chunk.js","sourcesContent":["/* eslint-disable no-empty-pattern */\n/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable no-plusplus */\nimport React from 'react';\nimport './Carousel.scss';\n\ninterface General {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ntype Props = General & {\n  images: string[];\n};\n\ntype State = General & {\n  prevButtonDisable: boolean;\n  nextButtonDisable: boolean;\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    step: this.props.step,\n    frameSize: this.props.frameSize,\n    itemWidth: this.props.itemWidth,\n    animationDuration: this.props.animationDuration,\n    infinite: this.props.infinite,\n    prevButtonDisable: true,\n    nextButtonDisable: false,\n  };\n\n  position = 0;\n\n  count = this.state.frameSize;\n\n  prevButtonClick = () => {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n    } = this.state;\n\n    this.count -= step;\n    this.setState({ nextButtonDisable: false });\n\n    if (this.count <= frameSize) {\n      this.count = frameSize;\n      this.position = 0;\n      this.setState({ prevButtonDisable: true });\n    } else {\n      this.position += step * itemWidth;\n    }\n  };\n\n  nextButtonClick = () => {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.state;\n    const imgAmount = this.props.images.length;\n\n    this.count += step;\n    this.setState({ prevButtonDisable: false });\n    if (this.count >= imgAmount) {\n      if (infinite) {\n        this.count -= imgAmount;\n        this.position = 0;\n      } else {\n        this.count = imgAmount;\n        this.position = -(imgAmount - frameSize) * itemWidth;\n        this.setState({ nextButtonDisable: true });\n      }\n    } else {\n      this.position -= step * itemWidth;\n    }\n  };\n\n  componentDidUpdate = ({}, prevState: State) => {\n    if (this.position === 0) {\n      this.count = this.state.frameSize;\n\n      return;\n    }\n\n    const difference = this.state.frameSize - prevState.frameSize;\n\n    this.position += difference * this.state.itemWidth;\n    this.count += difference;\n  };\n\n  render() {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      prevButtonDisable,\n      nextButtonDisable,\n    } = this.state;\n\n    const { images } = this.props;\n    let alt = 0;\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel__images-container\"\n          style={{\n            top: `${50 - (itemWidth - 130) / 2}px`,\n          }}\n        >\n          <button\n            type=\"button\"\n            className=\"Carousel__prevButton button\"\n            onClick={this.prevButtonClick}\n            disabled={prevButtonDisable}\n          />\n\n          <div\n            className=\"Carousel__images\"\n            style={{\n              width: `${itemWidth * frameSize}px`,\n              transition: `width ${animationDuration}ms`,\n              borderRadius: `${itemWidth / 2}px`,\n            }}\n          >\n            <ul\n              className=\"Carousel__list\"\n              style={{\n                transform: `translateX(${this.position}px)`,\n                transition: `transform ${animationDuration}ms`,\n              }}\n            >\n              {images.map(img => {\n                alt++;\n\n                return (\n                  (\n                    <li key={`${alt}`} className=\"Carousel__item\">\n                      <img\n                        src={img}\n                        alt={`${alt}`}\n                        style={{\n                          width: `${itemWidth}px`,\n                        }}\n                      />\n                    </li>\n                  )\n                );\n              })}\n            </ul>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"Carousel__nextButton button\"\n            onClick={this.nextButtonClick}\n            disabled={nextButtonDisable}\n            data-cy=\"next\"\n          />\n        </div>\n\n        <div\n          className=\"Carousel__settings\"\n        >\n          <label className=\"Carousel__label\"> Step:\n            <input\n              className=\"Carousel__input\"\n              id=\"step\"\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              defaultValue={step}\n              onInput={(event) => {\n                this.setState({ step: +event.currentTarget.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__label\"> Number of visible images per page:\n            <input\n              className=\"Carousel__input\"\n              id=\"frameSize\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              defaultValue={frameSize}\n              onInput={(event) => {\n                this.setState({ frameSize: +event.currentTarget.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__label\"> Image width, [px]:\n            <input\n              className=\"Carousel__input\"\n              id=\"itemWidth\"\n              type=\"number\"\n              min=\"50\"\n              max=\"250\"\n              step=\"5\"\n              defaultValue={itemWidth}\n              onInput={(event) => {\n                this.setState({ itemWidth: +event.currentTarget.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__label\"> Animation duration, [ms]:\n            <input\n              className=\"Carousel__input\"\n              id=\"animationDuration\"\n              type=\"number\"\n              min=\"0\"\n              step=\"100\"\n              defaultValue={animationDuration}\n              onInput={(event) => {\n                this.setState({\n                  animationDuration: +event.currentTarget.value,\n                });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__label\"> Infinite:\n            <input\n              className=\"Carousel__input\"\n              id=\"infinite\"\n              type=\"checkbox\"\n              defaultChecked={infinite}\n              onInput={(event) => {\n                this.setState({\n                  infinite: event.currentTarget.checked,\n                });\n\n                if (this.count === this.props.images.length) {\n                  this.setState({\n                    nextButtonDisable: !nextButtonDisable,\n                  });\n                }\n              }}\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          Carousel with {images.length} images\n        </h1>\n\n        <Carousel\n          images={images}\n          step={3}\n          frameSize={3}\n          itemWidth={130}\n          animationDuration={1000}\n          infinite={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}